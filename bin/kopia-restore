#!/usr/bin/env bash

set -e

source /usr/local/etc/library.sh

SNAPSHOT_ID="${1?}"
REPOSITORY="${2}"
REPOSITORY_PASSWORD="${3}"

data_dir="$(get_nc_config_value datadirectory)"
docker_args=()
kopia_args=()
hostname=restore
config_dir="/usr/local/etc/kopia"
[[ -f "${config_dir}/repository.config" ]] && hostname=$(jq '.hostname' "${config_dir}/repository.config")
(
  source "${BINDIR}/BACKUPS/kopia.sh";
  [[ -f "${config_dir}/repository.config" ]] && cp "${config_dir}/repository.config" "${config_dir}/repository-bkp.config"
  setup_repository "${REPOSITORY}" "${STORAGE_KEY}" "${REPOSITORY_PASSWORD}" "$hostname"
  mv /usr/local/etc/kopia/repository.config /usr/local/etc/kopia/restore.config
  [[ -f "${config_dir}/repository-bkp.config" ]] && mv "${config_dir}/repository-bkp.config" "${config_dir}/repository.config"
)

export KOPIA_PASSWORD="$(source "${BINDIR}/BACKUPS/kopia.sh"; get_repository_password "${REPOSITORY_PASSWORD}")"

snapshot_json="$(ncp-kopia snapshot list --all --json | jq ".[] | select(.id | test(\"${SNAPSHOT_ID}\"))")"
obj_id="$(echo "${snapshot_json}" | jq -r '.rootEntry.obj')"
obj_name="$(echo "${snapshot_json}" | jq -r '.rootEntry.name')"

trap restore_maintenance_mode EXIT

save_maintenance_mode || true
if [[ "${obj_name}" == "db" ]]
then
  echo "DB backup detected."
  if [[ -z "$data_dir" ]]
  then
    RESTORE_DIR="$(dirname "${data_dir}")/kopia-restore.XXXXXX"
  else
    RESTORE_DIR="$(mktemp -d "/tmp/kopia-restore.XXXXXX")"
  fi
  docker run --rm --pull always \
    -v /usr/local/etc/kopia:/app/config \
    -v /var/log/kopia:/app/logs \
    -v "${RESTORE_DIR}:/restore" \
    -e KOPIA_PASSWORD \
    "${docker_args[@]}" \
    kopia/kopia:latest snapshot restore \
      --config-file /app/config/restore.config \
      "${obj_id}" "/restore"
  cd "${RESTORE_DIR}"

  cleanup() { local RET=$?; echo "Cleanup..."; rm -rf "${RESTORE_DIR}" || true; restore_maintenance_mode; trap "" EXIT; exit $RET; }
  trap cleanup INT TERM HUP ERR EXIT

  mysql -u root <<EOFMYSQL
DROP DATABASE IF EXISTS nextcloud;
CREATE DATABASE nextcloud;
GRANT USAGE ON *.* TO '$DBADMIN'@'localhost' IDENTIFIED BY '$DBPASSWD';
DROP USER '$DBADMIN'@'localhost';
CREATE USER '$DBADMIN'@'localhost' IDENTIFIED BY '$DBPASSWD';
GRANT ALL PRIVILEGES ON nextcloud.* TO $DBADMIN@localhost;
EXIT
EOFMYSQL
  mysql -u root nextcloud <  "$RESTORE_DIR"/nextcloud-sqlbkp_*.bak || { echo "Error restoring nextcloud database"; return 1; }
  echo "Successfully restored database from backup."
  return
elif [[ "${obj_name}" == "ncdata" ]]
then
  echo "Data backup detected"
  [[ -e "$data_dir" ]] && {
    bk_target="$data_dir-$( date '+%FT%s' )"
    echo "backing up existing $data_dir to ${bk_target}..."
    mv "$data_dir" "${bk_target}" || exit 1
  }
  echo "restore datadir to $data_dir"

  mkdir -p "$data_dir"
  grep -q "btrfs" <(stat -fc%T "$data_dir") && which btrfs &>/dev/null && {
    rmdir "$data_dir"                  || exit 1
    btrfs subvolume create "$data_dir" || exit 1
  }
  chown www-data: "$data_dir"

  cleanup() { RET=$?; echo "Cleanup..."; restore_maintenance_mode; trap "" EXIT; exit $RET; }
  trap cleanup INT TERM HUP ERR EXIT

  echo "Restoring files..."
  docker run --rm --pull always \
    -v /usr/local/etc/kopia:/app/config \
    -v /var/log/kopia:/app/logs \
    -v "${data_dir}:/restore" \
    -e KOPIA_PASSWORD \
    "${docker_args[@]}" \
    kopia/kopia:latest snapshot restore \
      --config-file /app/config/restore.config \
      "${obj_id}" "/restore"
  echo "Snapshot restored sucessfully"
  exit
else
  echo "Invalid snapshot (Expected snapshot of /ncdata or /db, was '${obj_name}')!"
  exit 1
fi
