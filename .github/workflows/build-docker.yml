# https://www.docker.com/blog/docker-v2-github-action-is-now-ga/
# https://www.docker.com/blog/multi-arch-build-and-images-the-simple-way/
# https://docs.github.com/en/actions/guides/publishing-docker-images

name: 'Docker Integration Tests and Release'

on:
  workflow_call:
    inputs:
      git_ref:
        required: true
        type: string
      arch:
        required: false
        type: string
        default: 'x86'
  push:
    branches:
      - master
      - devel
  pull_request:
    branches:
      - master
      - devel
      - release/*

jobs:
  build:
    if: ${{ github.repository == 'nextcloud/nextcloudpi' }}
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref || github.ref }}"
      ARCH: "${{ inputs.arch || 'x86' }}"
      LOG_DCKR: "\\033[1;34mDCKR::\\033[0m"
      LOG_NCP: "\\033[1;36m~NCP::\\033[0m"
      LOG_CICD: "\\033[1;35mCICD::\\033[0m"
      LOG_TEST: "\\033[1;33mTEST::\\033[0m"
      LOG_DIAG: "\\033[1;31mDIAG::\\033[0m"
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"

      - name: Login to docker
        run: |
          echo "${{ secrets.DOCKER_PASSWORD_INTERNAL }}" | docker login -u "${{ secrets.DOCKER_LOGIN_INTERNAL }}" --password-stdin

      - name: Build images
        id: build-container
        run: |
          ./build/build-docker.sh "${ARCH?}"
          docker tag "ownyourbits/nextcloudpi-${ARCH?}:latest" "thecalcaholic/ncp-internal-${ARCH?}:${{ github.run_id }}"
          testing_image="ownyourbits/nextcloudpi-${ARCH?}:latest"
          [[ "${ARCH?}" == "x86" ]] || testing_image="ownyourbits/ncp-qemu-fix-${ARCH?}:latest"
          docker tag "${testing_image}" "thecalcaholic/ncp-internal-${ARCH?}:${{ github.run_id }}-testing"
          docker push "thecalcaholic/ncp-internal-${ARCH?}:${{ github.run_id }}"
          docker push "thecalcaholic/ncp-internal-${ARCH?}:${{ github.run_id }}-testing"

  update-test:
    needs: []
#      - build
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref || github.ref }}"
      ARCH: "${{ inputs.arch || 'x86' }}"
      LOG_DCKR: "\\033[1;34mDCKR::\\033[0m"
      LOG_NCP: "\\033[1;36m~NCP::\\033[0m"
      LOG_CICD: "\\033[1;35mCICD::\\033[0m"
      LOG_TEST: "\\033[1;33mTEST::\\033[0m"
      LOG_DIAG: "\\033[1;31mDIAG::\\033[0m"
      CHECK_OK: "\\033[1;32m✓\\033[0m"
      CHECK_FAILED: "\\033[1;31m⨯\\033[0m"
    steps:
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"
          fetch-depth: 0
      - name: Get previous release
        id: get_previous_version
        shell: bash
        run: |
          set -ex
          if [[ "${{ env.VERSION }}" == "refs/heads/devel" ]]
          then
            version="latest"
          else
            ref="${{ github.base_ref }}"
            [[ -n "$ref" ]] || ref="${{ github.ref }}"
            git checkout "$ref"
            if [[ "${{ github.ref_type }}" != "tag" ]] || ! git describe --tags > /dev/null
            then
              git fetch -fu --tags origin "${ref}:${ref}"
            fi
            version="$(git describe --tags || true)"
            [[ "$version" =~ .*-.*-.* ]] || {
              git checkout HEAD~1
              version="$(git describe --tags || echo latest)"
            }
            version="${version%-*-*}"
          fi
          curl "https://hub.docker.com/v2/repositories/ownyourbits/nextcloudpi-${ARCH}/tags/${version}" | grep 'errinfo' > /dev/null && {
            echo "Image ownyourbits/nextcloudpi-${ARCH}:${version} does not exist - falling back to :latest"
            version="latest"
          }
          echo "Previous version is '$version'"
          echo "PREVIOUS_VERSION=$version" >> "$GITHUB_ENV"
          echo "previous_version=${version}" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Enable qemu SUID
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes

      - name: Start ncp container
        run: |
          docker volume create ncdata
          platform=linux/${ARCH?}
          [[ "$ARCH" == 'x86' ]] && platform=linux/amd64
          docker run --platform "$platform" -v ncdata:/data -d --rm -p 8443:443 -p 4443:4443 --name nextcloudpi ownyourbits/nextcloudpi-${ARCH}:${{ steps.get_previous_version.outputs.previous_version }} localhost

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"

      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
      - name: Setup GeckoDriver
        uses: ChlodAlejandro/setup-geckodriver@latest
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Selenium
        run: pip install selenium

      - name: Wait for container startup
        run: |
          set -e
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          
          attempt=0
          stage=0
          success=false
          for attempt in {1..30}
          do
            sleep 5
            echo -e "${LOG_CICD} Waiting for container startup (attempt $attempt/30)..."
            
            redis_pw="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"password'")"
            redis_socket="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"host'")"
            
            if [[ "$stage" == "0" ]] 
            then
              echo -ne "${LOG_CICD} Looking for 'Init done' in container logs .. "
              if docker logs nextcloudpi 2> /dev/null | grep '^Init done' > /dev/null
              then
                stage=1
                echo -e "${CHECK_OK}"
              else  
                echo -e "${CHECK_FAILED}"
              fi
              continue
            fi
          
            echo -ne "${LOG_CICD} Is maintenance mode disabled? .............. "
            [[ "$(docker exec nextcloudpi ncc maintenance:mode)" =~ .*disabled.* ]] || {
              echo -e "${CHECK_FAILED}"
              continue
            }
            echo -e "${CHECK_OK}"
            
            echo -ne "${LOG_CICD} Check NC status ............................ "
            ncc_status="$(docker exec nextcloudpi ncc status)" || { 
              echo -e "${CHECK_FAILED}"
              echo "$ncc_status" |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              continue
            }
            echo -e "${CHECK_OK}"
            
            echo -ne "${LOG_CICD} Attempt writing and reading to redis db .... "
            docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" set redisready yes > /dev/null 2>&1 \
            && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" get redisready > /dev/null 2>&1 || {
              echo -e "${CHECK_FAILED}"
              continue
            }
            echo -e "${CHECK_OK}"
            
            echo -ne "${LOG_CICD} Try to access activation page .............. "
            result="$(curl --no-progress-meter -k https://localhost:8443/activate/)" || {
              echo -e "${CHECK_FAILED}"
              echo "$result" |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} curl http://localhost:8443"
              curl http://localhost:8443 |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              container_ip="$(docker inspect nextcloudpi --format '{{ .NetworkSettings.IPAddress }}')"
              echo -e "${LOG_CICD} curl -k https://${container_ip}/activate/"
              curl -vk "https://${container_ip}/activate/" 2>&1 |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} a2query -s"
              docker exec nextcloudpi a2query -s |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} a2query -m"
              docker exec nextcloudpi a2query -m |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} apache2 -S"
              docker exec nextcloudpi apache2 -S |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              docker exec nextcloudpi cat /etc/apache2/apache2.conf |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} /etc/apache2/envvars"
              docker exec nextcloudpi cat /etc/apache2/envvars |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} apache2 config files"
              docker exec nextcloudpi ls -l /etc/apache2/sites-{available,enabled} /data/etc/apache2/sites-{available,enabled} |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              echo -e "${LOG_CICD} 000-default.conf"
              docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/000-default.conf || true
              echo -e "${LOG_CICD} default-ssl.conf"
              docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/default-ssl.conf || true
              echo -e "${LOG_CICD} ncp-activation.conf"
              docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/ncp-activation.conf || true
              echo -e "${LOG_CICD} apache error.log"
              docker exec nextcloudpi cat /var/log/apache2/error.log || true
              echo -e "${LOG_CICD} apache access.log"
              docker exec nextcloudpi cat /var/log/apache2/access.log || true
              echo -e "${LOG_CICD} ncp log"
              docker exec nextcloudpi cat /var/log/ncp.log |& awk "{ print \"${LOG_DCKR} \" \$0 }"
              continue
            }
            echo -e "${CHECK_OK}"
        
            success=true
            echo -e "${LOG_CICD} Startup successful"
            break
          done
          
          echo -e "${LOG_CICD} === DEBUGGING ==="
          echo -e "${LOG_CICD} a2query -s"
          docker exec nextcloudpi a2query -s |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          echo -e "${LOG_CICD} a2query -m"
          docker exec nextcloudpi a2query -m |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          echo -e "${LOG_CICD} apache2 -S"
          docker exec nextcloudpi cat /etc/apache2/apache2.conf |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          echo -e "${LOG_CICD} /etc/apache2/envvars"
          docker exec nextcloudpi cat /etc/apache2/envvars |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          docker exec nextcloudpi apache2 -S |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          echo -e "${LOG_CICD} apache2 config files"
          docker exec nextcloudpi ls -l /etc/apache2/sites-{available,enabled} /data/etc/apache2/sites-{available,enabled} |& awk "{ print \"${LOG_DIAG} \" \$0 }"
          echo -e "${LOG_CICD} 000-default.conf"
          docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/000-default.conf || true
          echo -e "${LOG_CICD} default-ssl.conf"
          docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/default-ssl.conf || true
          echo -e "${LOG_CICD} ncp-activation.conf"
          docker exec nextcloudpi cat /data/etc/apache2/sites-enabled/ncp-activation.conf || true
          echo -e "${LOG_CICD} apache error.log"
          docker exec nextcloudpi cat /var/log/apache2/error.log || true
          echo -e "${LOG_CICD} apache access.log"
          docker exec nextcloudpi cat /var/log/apache2/access.log || true
          echo -e "${LOG_CICD} ncp log"
          docker exec nextcloudpi cat /var/log/ncp.log |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_CICD} === DEBUGGING ==="
          
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} Timeout reached."
            exit 1
          }

      - name: Activate container
        working-directory: ./tests
        run: |
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          docker exec nextcloudpi bash -c 'tail -f /var/log/ncp.log' |& awk "{ print \"${LOG_NCP} \" \$0 }" &
          cmd=(python activation_tests.py --no-gui localhost 8443 4443)
          [[ "${ARCH?}" == "x86" ]] || { sleep 60; cmd+=(--timeout 300); }
          
          success=false
          for attempt in {1..10}
          do
            echo -e "${LOG_CICD} == Activation Tests (attempt $attempt/10) =="
            "${cmd[@]}"                                               |& awk "{ print \"${LOG_TEST} \" \$0 }"
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              tail -n 20 geckodriver.log                              |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              echo -e "${LOG_CICD} Activation test (attempt $attempt/10) failed!"
              docker exec nextcloudpi bash /usr/local/bin/ncp-diag    |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              cat /proc/sys/fs/binfmt_misc/qemu-aarch64               |& awk "{ print \"${LOG_DIAG} (qemu-aarch64) \" \$0 }" || true
              cat /proc/sys/fs/binfmt_misc/qemu-arm                   |& awk "{ print \"${LOG_DIAG} (qemu-arm) \" \$0 }" || true
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} Activation test failed in all attempts!"
            echo "Creating error report..."
            docker exec nextcloudpi bash /usr/local/bin/ncp-report > error-report.txt
            echo "done."
            exit 1
          }
          echo -e "${LOG_CICD} Activation test successful"
      - name: Start new container
        run: |
          docker stop nextcloudpi
          docker run -d -v ncdata:/data --rm -p 8443:443 -p 4443:4443 -e NOBACKUP=true --name nextcloudpi thecalcaholic/ncp-internal-${ARCH?}:3955102274-testing localhost
      - name: Wait for container startup
        run: |
          set -e
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          
          attempt=0
          stage=0
          for attempt in {1..200}
          do
            echo -e "${LOG_CICD} Waiting for container startup (attempt $attempt/30)..."
            redis_pw="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"password'")"
            redis_socket="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"host'")"
            if [[ "$stage" == "0" ]] && docker logs nextcloudpi 2> /dev/null | grep '^Init done' > /dev/null
            then
              stage=1
            elif [[ "$(docker exec nextcloudpi ncc maintenance:mode)" =~ .*disabled.* ]] \
              && docker exec nextcloudpi ncc status \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" set redisready yes \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" get redisready \
              && curl -k https://localhost:8443/activate/
            then
              echo -e "${LOG_CICD} Startup successful"
              break
            elif [[ "$attempt" -ge 30 ]]
            then
              echo -e "${LOG_CICD} Timeout reached."
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 5
          done
          
          echo "Wait one more minute..."
          sleep 60
      - name: Update Nextcloud
        run: |
          set -e
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          
          current_nc_version="$(docker exec nextcloudpi ncc status | grep "version:" | awk '{ print $3 }')"
          latest_nc_version="$(docker exec nextcloudpi cat /usr/local/etc/ncp.cfg | jq -r '.nextcloud_version')"
          
          if [[ "$current_nc_version" == "$latest_nc_version".* ]]
          then
            echo -e "${LOG_CICD} Nextcloud is up to date - skipping NC update test."
          else
            docker exec nextcloudpi bash -c "DBG=x ncp-update-nc ${latest_nc_version?}" |& awk "{ print \"${LOG_DCKR} \" \$0 }"
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              echo -e "${LOG_CICD} Nextcloud Update failed"
              echo -e "${LOG_CICD} Creating error report..."
              docker exec nextcloudpi bash /usr/local/bin/ncp-report > error-report.txt
              docker exec nextcloudpi bash /usr/local/bin/ncp-diag |& awk "{ print \"${LOG_DIAG} \" \$0 }"
              exit 1
            }
          fi
      - name: Wait for update completion
        run: |
          set -e
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          
          attempt=0
          for attempt in {1..30}
          do
            echo -e "${LOG_CICD} Waiting for update completion (attempt $attempt/30)..."
            redis_pw="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"password'")"
            redis_socket="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"host'")"
            if [[ "$(docker exec nextcloudpi ncc maintenance:mode)" =~ .*disabled.* ]] \
              && docker exec nextcloudpi ncc status \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" set redisready yes \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" get redisready
            then
              echo -e "${LOG_CICD} Startup successful"
              break
            elif [[ "$attempt" -ge 30 ]]
            then
              echo -e "${LOG_CICD} Timeout reached."
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 5
          done

      - name: Integration Tests
        working-directory: ./tests
        run: |
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          docker exec nextcloudpi bash -c 'tail -f /var/log/ncp.log' |& awk "{ print \"${LOG_NCP} \" \$0 }" &
          [[ "${ARCH?}" == "x86" ]] || sleep 240
          
          sleep 20
                    
          success=false
          for attempt in {1..5}
          do
            echo -e "${LOG_CICD} == System Tests (attempt $attempt/5) =="
            python system_tests.py --no-ping --non-interactive |& awk "{ print \"${LOG_TEST} \" \$0 }"
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              echo -e "${LOG_CICD} System test (attempt $attempt) failed!"
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} System test failed in all attempts!"
            echo -e "${LOG_CICD} Creating error report..."
            docker exec nextcloudpi bash /usr/local/bin/ncp-report > error-report.txt
            exit 1
          }
          echo -e "${LOG_CICD} System test successful"
          
          success=false
          for attempt in {1..3}
          do
            echo -e "${LOG_CICD} == Nextcloud Tests (attempt $attempt/5) =="
            python nextcloud_tests.py --no-gui localhost 8443 4443   |& awk "{ print \"${LOG_TEST} \" \$0 }" 
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              tail -n 20 geckodriver.log                             |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              echo -e "${LOG_CICD} Nextcloud test (attempt $attempt/3) failed!"
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} Nextcloud test failed in all attempts!"
            echo -e "${LOG_CICD} Creating error report..."
            docker exec nextcloudpi bash /usr/local/bin/ncp-report > error-report.txt
            echo -e "${LOG_CICD} done."
            exit 1
          }
          echo -e "${LOG_CICD} Nextcloud test successful"
          
          docker exec nextcloudpi bash /usr/local/bin/ncp-diag |& awk "{ print \"${LOG_DIAG} \" \$0 }"
      - name: "Upload error report"
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-docker-${{ env.ARCH }}-update-test-error-report
          path: tests/error-report.txt

  test:
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      VERSION: "${{ inputs.git_ref || github.ref }}"
      ARCH: "${{ inputs.arch || 'x86' }}"
      LOG_DCKR: "\\033[1;34mDCKR::\\033[0m"
      LOG_NCP: "\\033[1;36m~NCP::\\033[0m"
      LOG_CICD: "\\033[1;35mCICD::\\033[0m"
      LOG_TEST: "\\033[1;33mTEST::\\033[0m"
      LOG_DIAG: "\\033[1;31mDIAG::\\033[0m"
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to docker
        run: |
          echo "${{ secrets.DOCKER_PASSWORD_INTERNAL }}" | docker login -u "${{ secrets.DOCKER_LOGIN_INTERNAL }}" --password-stdin
      - name: Start ncp container
        run: |
          docker run -d --rm -p 8443:443 -p 4443:4443 --name nextcloudpi thecalcaholic/ncp-internal-${ARCH?}:${{ github.run_id }}-testing localhost

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: "${{ env.VERSION }}"

      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
      - name: Setup GeckoDriver
        uses: ChlodAlejandro/setup-geckodriver@latest
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Selenium
        run: pip install selenium
      - name: Wait for container startup
        run: |
          set -e
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &

          attempt=0
          stage=0
          for attempt in {1..200}
          do
            echo -e "${LOG_CICD} Waiting for container startup (attempt $attempt/30)..."
            redis_pw="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"password'")"
            redis_socket="$(docker exec nextcloudpi bash -c ". /usr/local/etc/library.sh; get_nc_config_value 'redis\"][\"host'")"
            if [[ "$stage" == "0" ]] && docker logs nextcloudpi 2> /dev/null | grep '^Init done' > /dev/null
            then
              stage=1
            elif [[ "$(docker exec nextcloudpi ncc maintenance:mode)" =~ .*disabled.* ]] \
              && docker exec nextcloudpi ncc status \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" set redisready yes \
              && docker exec nextcloudpi redis-cli -s "$redis_socket" -a "$redis_pw" get redisready \
              && curl -k https://localhost:8443/activate/
            then
              echo -e "${LOG_CICD} Startup successful"
              break
            elif [[ "$attempt" -ge 30 ]]
            then
              echo -e "${LOG_CICD} Timeout reached."
              exit 1
            fi

            attempt=$((attempt + 1))
            sleep 5
          done
      - name: Integration Tests
        working-directory: ./tests
        run: |
          docker logs nextcloudpi                                    |& awk "{ print \"${LOG_DCKR} \" \$0 }"
          echo -e "${LOG_DCKR} =========="
          docker logs -f nextcloudpi                                 |& awk "{ print \"${LOG_DCKR} \" \$0 }" &
          docker exec nextcloudpi bash -c 'tail -f /var/log/ncp.log' |& awk "{ print \"${LOG_NCP} \" \$0 }" &
          cmd=(python activation_tests.py --no-gui localhost 8443 4443)
          [[ "${ARCH?}" == "x86" ]] || { sleep 60; cmd+=(--timeout 300); }
          
          success=false
          for attempt in {1..10}
          do
            echo -e "${LOG_CICD} == Activation Tests (attempt $attempt/10) =="
            "${cmd[@]}"                                              |& awk "{ print \"${LOG_TEST} \" \$0 }"
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              tail -n 20 geckodriver.log >&2                         |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              echo -e "${LOG_CICD} Activation test (attempt $attempt/10) failed!"
              docker exec nextcloudpi bash /usr/local/bin/ncp-diag   |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} Activation test failed in all attempts!"
            exit 1
          }
          echo -e "${LOG_CICD} Activation test successful"
          
          success=false
          for attempt in {1..5}
          do
            echo -e "${LOG_CICD} == System Tests (attempt $attempt/5) =="
            python system_tests.py --no-ping --non-interactive       |& awk "{ print \"${LOG_TEST} \" \$0 }" 
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              echo -e "${LOG_CICD} System test (attempt $attempt) failed!"
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} System test failed in all attempts!"
            exit 1
          }
          echo -e "${LOG_CICD} System test successful"
          
          success=false
          for attempt in {1..5}
          do
            echo -e "${LOG_CICD} == Nextcloud Tests (attempt $attempt/5) =="
            python nextcloud_tests.py --no-gui localhost 8443 4443   |& awk "{ print \"${LOG_TEST} \" \$0 }" 
            [[ ${PIPESTATUS[0]} -eq 0 ]] || {
              tail -n 20 geckodriver.log >&2                         |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true
              echo -e "${LOG_CICD} Nextcloud test (attempt $attempt/3) failed!"
              sleep 12
              continue
            }
            success=true
            break
          done
          [[ "$success" == "true" ]] || {
            echo -e "${LOG_CICD} Nextcloud test failed in all attempts!"
            echo -e "${LOG_CICD} Creating error report..."
            docker exec nextcloudpi bash /usr/local/bin/ncp-report > error-report.txt
            echo -e "${LOG_CICD} done."
            exit 1
          }
          echo -e "${LOG_CICD} Nextcloud test successful"
          
          docker exec nextcloudpi bash /usr/local/bin/ncp-diag |& awk "{ print \"${LOG_DIAG} \" \$0 }" || true

      - name: "Upload error report"
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.run_id }}-docker-${{ env.ARCH }}-install-test-error-report
          path: tests/error-report.txt
